"Address","LoBit","HiBit","Permission","Group","Name","Description"
"0x0",0,0,"w","RESETS","GENERAL","general reset"
"0x0",1,1,"w","RESETS","COUNTER","counter reset"
"0x0",5,5,"w","RESETS","SDRAM","Reset DDR SDRAM"
"0x0",11,11,"w","RESETS","EVN","Event Number Reset through TTC when in local L1A mode"
"0x0",12,12,"w","RESETS","ORN","Orbit Number Reset through TTC when in local L1A mode"
"0x0",24,31,"r","T1_INFO","SERIAL_NO","T1 Serial Number"
"0x1",16,31,"r","T1_INFO","FIRM_VER","T1 Firmware Version"
"0x0",5,5,"r","TTC_STATUS","NOT_RDY","TTC Not Ready"
"0x0",6,6,"r","TTC_STATUS","BCNT_ERR","TTC Bcnt Error"
"0x0",7,7,"r","TTC_STATUS","SGL_ERR","TTC Single Bit Error"
"0x0",8,8,"r","TTC_STATUS","MLT_ERR","TTC Multi Bit Error"
"0x0",9,9,"r","TTC_STATUS","SYNC_LOST","TTC Sync Lost"
"0x0",10,10,"w","LOCAL_L1A","BURST","Send Burst of Local L1A"
"0x0",26,26,"w","LOCAL_L1A","CONTINUOUS","Set Continuous Local L1A mode"
"0x1c",30,31,"rw","LOCAL_L1A","L1A_TYPE","'00' L1A per orbit, '10' per bunch crossing, '11' random"
"0x1c",28,29,"rw","LOCAL_L1A","TRIGGER_RULES_ENFORCED","'00' all four rules, '01' not rule 4, '10' rule 1 and 2, '11' rule 1"
"0x1c",16,27,"rw","LOCAL_L1A","NUMBER_BURST_L1A","number of burst L1As + 1"
"0x1c",0,15,"rw","LOCAL_L1A","GEN_PERIOD_L1A","L1A spacing: OrN = (N+1), BcN = (N+1), random = (2*N/s)"
"0x0",2,2,"r","MONITOR_BUFFER_STATUS","FULL","Monitor Buffer Full"
"0x0",3,3,"r","MONITOR_BUFFER_STATUS","EMPTY","Monitor Buffer Empty"
"0x2",8,14,"r","MONITOR_BUFFER_STATUS","POINTER","Monitor Buffer Write Pointer	"
"0x2",15,15,"r","MONITOR_BUFFER_STATUS","128_EV_BUF","At least 128 Evs in buffer"
"0x1",3,3,"rw","MONITOR_BUFFER_STATUS","PAUSE_EV_BLD","'1' pauses event building"
"0x2",0,7,"r","MONITOR_BUFFER_STATUS","NUM_EV_AFTER_TRIG","Num of Evs Captured after Trigger"
"0x4000",0,31,"r","","MONITOR_BUFFER","Monitor data buffer (0x4000-0x7fff)"
"0x8000000",0,31,"rw","","FULL_MEMORY","Full memory read/write access (write disabled when in run mode) (0x8000000-0xbffffff)"
"0x1",15,15,"rw","EN_OPTIONS","SV_DAQ_DTA_BUF","Save received DAQ data to monitor buffer"
"0x1",14,14,"rw","EN_OPTIONS","STOP_EV_BLD","if '1', monitor buffer full will stop event builder"
"0x1",8,8,"rw","EN_OPTIONS","TTS_OUT_TTC_OUT","TTS output is TTC signal output"
"0x1",7,7,"rw","EN_OPTIONS","GEN_FK_DATA","generate fake data upon recieving L1A"
"0x1",5,5,"rw","EN_OPTIONS","TTCRX_BDCST_COMM","'1' enables TTCrx boradcast commands"
"0x1",2,2,"rw","EN_OPTIONS","INT_GEN_L1A","'1' uses internally generated L1A"
"0x1",12,12,"rw","TEST_BITS","TTS_DRVR_TEST","if '1', TTS outputs correspond to bits 0-3 of 0x19 instead of TTS state"
"0x1",9,9,"rw","TEST_BITS","DAQ_LINK_TEST","For testing the DAQ Link SFP Connections"
"0x1",6,6,"rw","TEST_BITS","MEM_TST_BIT","if '0', mem test uses 64bit PRBS. if '1', uses 32bit seq nums"
"0x1",4,4,"rw","TEST_BITS","MEM_SLF_TST","'1' enables memory self test"
"0x1",0,0,"rw","","RUN_MODE","Run Mode"
"0xd",0,31,"r","STATUS","MON_EV_SZ","Monitored Ev Size in 32-bit word. Returns '0' in run mode if no data available"
"0xe",0,31,"r","STATUS","UNREAD_EV_CAPT","Number of unread events captured by monitor  "
"0xf",0,31,"r","STATUS","HTR_CRC_CHECK","HTR CRC check error count of built events"
"0x18",0,31,"rw","STATUS","FAKE_DATA_PAYLOAD","Payload size in 16bit words of fake HTR event"
"0x0",13,13,"r","STATUS","L1A_OVFL_WARN","L1A Overflow Warning"
"0x46",0,31,"r","STATUS","L1A_LO","L1A Counter"
"0x47",0,31,"r","STATUS","L1A_HI","??"
"0x48",0,31,"r","STATUS","RUN_TIME_LO","Run Time Counter"
"0x49",0,31,"r","STATUS","RUN_TIME_HI","??"
"0x4a",0,31,"r","STATUS","RDY_TIME_LO","Ready Time Counter"
"0x4b",0,31,"r","STATUS","RDY_TIME_HI","??"
"0x4c",0,31,"r","STATUS","BUSY_TIME_LO","Busy Time Counter"
"0x4d",0,31,"r","STATUS","BUSY_TIME_HI","??"
"0x4e",0,31,"r","STATUS","L1A_SYNC_LOST_TIME_LO","L1A Sync Lost Time Counter"
"0x4f",0,31,"r","STATUS","L1A_SYNC_LOST_TIME_HI","??"
"0x50",0,31,"r","STATUS","L1A_OVFL_WARN_TIME_LO","L1A Overflow Warning Time Counter"
"0x51",0,31,"r","STATUS","L1A_OVFL_WARN_TIME_HI","??"
"0x56",0,31,"r","STATUS","TOT_MON_EV_LO","Total Monitored Event Counter"
"0x57",0,31,"r","STATUS","TOT_MON_EV_HI","??"
"0x2",24,31,"r","ERR_CTCH","ENA_ERR_COND","Enabled error conditions of recorded events"
"0x2",17,17,"rw","ERR_CTCH","CTCH_CRC_ERR","if '1', catches evs when CRC error"
"0x2",16,16,"rw","ERR_CTCH","CTCH_EVN_ORN_BCNT_ERR","if '1', catches evs when evn/orn/bcnt mismatch"
"0x2",23,23,"rw","SCALING","MEGA_SCALE","if '1', save every n EVN where n is determined by bits 19-22"
"0x2",19,22,"rw","SCALING","PRE_SCALE_FACT","PreScale Factor. 0xf low 5 bits 0, 0x0 low 50 bits 0"
"0x2",0,15,"w","SCALING","SCALE_FACT","scale factor( = contents + 1)"
"0x3",27,27,"r","LINK_READY","AMC11_LK_RDY","'1' indicates AMC11 Link Ready"
"0x3",26,26,"r","LINK_READY","AMC10_LK_RDY","'1' indicates AMC10 Link Ready"
"0x3",25,25,"r","LINK_READY","AMC09_LK_RDY","'1' indicates AMC09 Link Ready"
"0x3",24,24,"r","LINK_READY","AMC08_LK_RDY","'1' indicates AMC08 Link Ready"
"0x3",23,23,"r","LINK_READY","AMC07_LK_RDY","'1' indicates AMC07 Link Ready"
"0x3",22,22,"r","LINK_READY","AMC06_LK_RDY","'1' indicates AMC06 Link Ready"
"0x3",21,21,"r","LINK_READY","AMC05_LK_RDY","'1' indicates AMC05 Link Ready"
"0x3",20,20,"r","LINK_READY","AMC04_LK_RDY","'1' indicates AMC04 Link Ready"
"0x3",19,19,"r","LINK_READY","AMC03_LK_RDY","'1' indicates AMC03 Link Ready"
"0x3",18,18,"r","LINK_READY","AMC02_LK_RDY","'1' indicates AMC02 Link Ready"
"0x3",17,17,"r","LINK_READY","AMC01_LK_RDY","'1' indicates AMC01 Link Ready"
"0x3",16,16,"r","LINK_READY","AMC00_LK_RDY","'1' indicates AMC00 Link Ready"
"0x3",11,11,"rw","ENABLE_AMC","ENA_AMC11","'1' enables AMC11"
"0x3",10,10,"rw","ENABLE_AMC","ENA_AMC10","'1' enables AMC10"
"0x3",9,9,"rw","ENABLE_AMC","ENA_AMC09","'1' enables AMC09"
"0x3",8,8,"rw","ENABLE_AMC","ENA_AMC08","'1' enables AMC08"
"0x3",7,7,"rw","ENABLE_AMC","ENA_AMC07","'1' enables AMC07"
"0x3",6,6,"rw","ENABLE_AMC","ENA_AMC06","'1' enables AMC06"
"0x3",5,5,"rw","ENABLE_AMC","ENA_AMC05","'1' enables AMC05"
"0x3",4,4,"rw","ENABLE_AMC","ENA_AMC04","'1' enables AMC04"
"0x3",3,3,"rw","ENABLE_AMC","ENA_AMC03","'1' enables AMC03"
"0x3",2,2,"rw","ENABLE_AMC","ENA_AMC02","'1' enables AMC02"
"0x3",1,1,"rw","ENABLE_AMC","ENA_AMC01","'1' enables AMC01"
"0x3",0,0,"rw","ENABLE_AMC","ENA_AMC00","'1' enables AMC00"
"0x5",16,27,"r","LK_VER_WRONG","PORT_SYNC_LOST","'0' indicates sync lost at corresponding AMC Port"
"0x5",11,11,"r","LK_VER_WRONG","AMC11_LK_VER","'1' AMC11 Link Version Wrong"
"0x5",10,10,"r","LK_VER_WRONG","AMC10_LK_VER","'1' AMC10 Link Version Wrong"
"0x5",9,9,"r","LK_VER_WRONG","AMC09_LK_VER","'1' AMC09 Link Version Wrong"
"0x5",8,8,"r","LK_VER_WRONG","AMC08_LK_VER","'1' AMC08 Link Version Wrong"
"0x5",7,7,"r","LK_VER_WRONG","AMC07_LK_VER","'1' AMC07 Link Version Wrong"
"0x5",6,6,"r","LK_VER_WRONG","AMC06_LK_VER","'1' AMC06 Link Version Wrong"
"0x5",5,5,"r","LK_VER_WRONG","AMC05_LK_VER","'1' AMC05 Link Version Wrong"
"0x5",4,4,"r","LK_VER_WRONG","AMC04_LK_VER","'1' AMC04 Link Version Wrong"
"0x5",3,3,"r","LK_VER_WRONG","AMC03_LK_VER","'1' AMC03 Link Version Wrong"
"0x5",2,2,"r","LK_VER_WRONG","AMC02_LK_VER","'1' AMC02 Link Version Wrong"
"0x5",1,1,"r","LK_VER_WRONG","AMC01_LK_VER","'1' AMC01 Link Version Wrong"
"0x5",0,0,"r","LK_VER_WRONG","AMC00_LK_VER","'1' AMC00 Link Version Wrong"
"0x6",27,27,"r","BC0_LOCK","AMC11_BC0_LOCK","AMC11 Bc0 Locked"
"0x6",26,26,"r","BC0_LOCK","AMC10_BC0_LOCK","AMC10 Bc0 Locked"
"0x6",25,25,"r","BC0_LOCK","AMC09_BC0_LOCK","AMC09 Bc0 Locked"
"0x6",24,24,"r","BC0_LOCK","AMC08_BC0_LOCK","AMC08 Bc0 Locked"
"0x6",23,23,"r","BC0_LOCK","AMC07_BC0_LOCK","AMC07 Bc0 Locked"
"0x6",22,22,"r","BC0_LOCK","AMC06_BC0_LOCK","AMC06 Bc0 Locked"
"0x6",21,21,"r","BC0_LOCK","AMC05_BC0_LOCK","AMC05 Bc0 Locked"
"0x6",20,20,"r","BC0_LOCK","AMC04_BC0_LOCK","AMC04 Bc0 Locked"
"0x6",19,19,"r","BC0_LOCK","AMC03_BC0_LOCK","AMC03 Bc0 Locked"
"0x6",18,18,"r","BC0_LOCK","AMC02_BC0_LOCK","AMC02 Bc0 Locked"
"0x6",17,17,"r","BC0_LOCK","AMC01_BC0_LOCK","AMC01 Bc0 Locked"
"0x6",16,16,"r","BC0_LOCK","AMC00_BC0_LOCK","AMC00 Bc0 Locked"
"0x6",0,4,"r","BC0_LOCK","SET_BC0_COMP","Set Bc0 compensation, default to 0x18"
"0x8",16,19,"rw","OFFST_REG","ORN_OFFST","orbit number offset"
"0x8",8,8,"rw","OFFST_REG","TTC_BCNT_RESET","'1' ttc_bcnt_reset only works once after system reset"
"0x8",0,7,"rw","OFFST_REG","BCNT_OFFST","Bcnt Offset"
"0x9",31,31,"rw","CALIB_REG","CALIB_EV_ENA","'1' Calibration events enabled (default 1)"
"0x9",16,27,"r","CALIB_REG","CALIB_WIN_UPPER_RD","Calibration window upper limit(included)"
"0x9",12,15,"r","CALIB_REG","CURR_LSR_POS","Current laser position"
"0x9",0,11,"r","CALIB_REG","CALIB_WIN_LOWER_RD","Calibration window lower limit(not included)"
"0x9",16,21,"w","CALIB_REG","CALIB_WIN_UPPER_WR","Settable Part of Calibration WIN upper lim (bits 27-22 fixed 110110), default 100110"
"0x9",0,5,"w","CALIB_REG","CALIB_WIN_LOWER_WR","Settable Part of Calibration WIN lower lim (bits 11-6 fixed 110110), default 011101"
"0x10",17,17,"r","MON_BUF_STATUS","MON_BUF_AVAILABLE","Monitor Buffer Available"
"0x10",16,16,"r","MON_BUF_STATUS","TCP_BUF_AVAILABLE","TCP Buffer Available"
"0x10",12,14,"r","MON_BUF_STATUS","DDR3_PORT_INPUT_FULL","DDR3 event data write port input FIFO full"
"0x10",8,10,"r","MON_BUF_STATUS","DDR3_PORT_READY","DDR3 event data write port ready"
"0x10",4,6,"r","MON_BUF_STATUS","EVB_BUF_EVENT_SIZE","Event size in even buffer of event builders"
"0x10",0,2,"r","MON_BUF_STATUS","EVB_BUF_EVENT_READY","Event data ready in event buffer of event builders"
"0x30",0,31,"r","TEMP_PWR","V6_DIE_TEMP","V6 die temperature in unit of 0.1 degree Celsius"
"0x31",0,31,"r","TEMP_PWR","1.0V_ANA_PWR","1.0V analog power voltage in millivolt"
"0x32",0,31,"r","TEMP_PWR","1.2V_ANA_PWR","1.2V analog power voltage in millivolt"
"0x33",0,31,"r","TEMP_PWR","1.0V_PWR","1.0V power voltage in millivolt"
"0x34",0,31,"r","TEMP_PWR","1.5V_PWR","1.5V power voltage in millivolt"
"0x35",0,31,"r","TEMP_PWR","2.5V_PWR","2.5V power voltage in millivolt"
"0x36",0,31,"r","TEMP_PWR","3.3V_PWR","3.3V power voltage in millivolt"
"0x38",0,31,"r","TEMP_PWR","12V_PWR","12V power voltage in millivolt"
"0x39",0,31,"r","TEMP_PWR","1.8V_VCC_AUX_GTX_PWR","1.8V VccAuxGTX power voltage in millivolt"
"0x3a",0,31,"r","TEMP_PWR","2.0V_VCC_AUX_IO_PWR","2.0V VccAuxIO power voltage in millivolt"
"0x3b",0,31,"r","TEMP_PWR","0.75V_DDR3_VTT_PWR","0.75V DDR_Vtt power voltage in millivolt"
"0x3c",0,31,"r","TEMP_PWR","0.75V_DDR3_VREF_PWR","0.75V DDR_Vref power voltage in millivolt"
"0x3d",0,31,"r","TEMP_PWR","1.8V_VCC_AUX_PWR","1.8V VccAux power voltage in millivolt"
"0x3e",0,31,"r","TEMP_PWR","1.0V_VCC_BRAM_PWR","1.0V VccBRAM power voltage in millivolt"
"0x40",0,31,"r","TTC_ERR","TTC_SGL_ERR_LO","TTC Single bit error counter"
"0x41",0,31,"r","TTC_ERR","TTC_SGL_ERR_HI","??"
"0x42",0,31,"r","TTC_ERR","TTC_MUL_ERR_LO","TTC Multi bit error counter"
"0x43",0,31,"r","TTC_ERR","TTC_MUL_ERR_HI","??"
"0x44",0,31,"r","TTC_ERR","TTC_BC0_ERR_LO","TTC BC0 Error Counter"
"0x45",0,31,"r","TTC_ERR","TTC_BC0_ERR_HI","??"
"0x100",0,31,"r","SFP_ROM","SFP0_ROM","SFP0 ROM data (first 128 bytes, little endian) (regs 0x100-0x11f)"
"0x120",0,31,"r","SFP_ROM","SFP1_ROM","SFP1 ROM data (first 128 bytes, little endian) (regs 0x100-0x11f)"
"0x140",0,31,"r","SFP_ROM","SFP2_ROM","SFP2 ROM data (first 128 bytes, little endian) (regs 0x100-0x11f)"
"0x160",0,31,"r","SFP_ROM","TTC_TTS_SFP_ROM","TTC/TTS SFP ROM data (fiorst 128 bytes, little endian) (regs 0x160-0x17f)"
"0x800",0,31,"rw","","AMC00","??"
"0x880",0,31,"rw","","AMC01","??"
"0x900",0,31,"rw","","AMC02","??"
"0x980",0,31,"rw","","AMC03","??"
"0xa00",0,31,"rw","","AMC04","??"
"0xa80",0,31,"rw","","AMC05","??"
"0xb00",0,31,"rw","","AMC06","??"
"0xb80",0,31,"rw","","AMC07","??"
"0xc00",0,31,"rw","","AMC08","??"
"0xc80",0,31,"rw","","AMC09","??"
"0xd00",0,31,"rw","","AMC10","??"
"0xd80",0,31,"rw","","AMC11","??"
"0xe00",28,31,"r","AMC00_HTR_IF","AMC00_HTR_IF_TTS","HTR_if TTS"
"0xe00",20,27,"r","AMC00_HTR_IF","AMC00_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe00",0,19,"r","AMC00_HTR_IF","AMC00_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe01",28,31,"r","AMC01_HTR_IF","AMC01_HTR_IF_TTS","HTR_if TTS"
"0xe01",20,27,"r","AMC01_HTR_IF","AMC01_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe01",0,19,"r","AMC01_HTR_IF","AMC01_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe02",28,31,"r","AMC02_HTR_IF","AMC02_HTR_IF_TTS","HTR_if TTS"
"0xe02",20,27,"r","AMC02_HTR_IF","AMC02_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe02",0,19,"r","AMC02_HTR_IF","AMC02_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe03",28,31,"r","AMC03_HTR_IF","AMC03_HTR_IF_TTS","HTR_if TTS"
"0xe03",20,27,"r","AMC03_HTR_IF","AMC03_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe03",0,19,"r","AMC03_HTR_IF","AMC03_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe04",28,31,"r","AMC04_HTR_IF","AMC04_HTR_IF_TTS","HTR_if TTS"
"0xe04",20,27,"r","AMC04_HTR_IF","AMC04_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe04",0,19,"r","AMC04_HTR_IF","AMC04_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe05",28,31,"r","AMC05_HTR_IF","AMC05_HTR_IF_TTS","HTR_if TTS"
"0xe05",20,27,"r","AMC05_HTR_IF","AMC05_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe05",0,19,"r","AMC05_HTR_IF","AMC05_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe06",28,31,"r","AMC06_HTR_IF","AMC06_HTR_IF_TTS","HTR_if TTS"
"0xe06",20,27,"r","AMC06_HTR_IF","AMC06_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe06",0,19,"r","AMC06_HTR_IF","AMC06_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe07",28,31,"r","AMC07_HTR_IF","AMC07_HTR_IF_TTS","HTR_if TTS"
"0xe07",20,27,"r","AMC07_HTR_IF","AMC07_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe07",0,19,"r","AMC07_HTR_IF","AMC07_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe08",28,31,"r","AMC08_HTR_IF","AMC08_HTR_IF_TTS","HTR_if TTS"
"0xe08",20,27,"r","AMC08_HTR_IF","AMC08_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe08",0,19,"r","AMC08_HTR_IF","AMC08_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe09",28,31,"r","AMC09_HTR_IF","AMC09_HTR_IF_TTS","HTR_if TTS"
"0xe09",20,27,"r","AMC09_HTR_IF","AMC09_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe09",0,19,"r","AMC09_HTR_IF","AMC09_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe0a",28,31,"r","AMC10_HTR_IF","AMC10_HTR_IF_TTS","HTR_if TTS"
"0xe0a",20,27,"r","AMC10_HTR_IF","AMC10_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe0a",0,19,"r","AMC10_HTR_IF","AMC10_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe0b",28,31,"r","AMC11_HTR_IF","AMC11_HTR_IF_TTS","HTR_if TTS"
"0xe0b",20,27,"r","AMC11_HTR_IF","AMC11_HTR_IF_TRIG_DATA","HTR_if TrigData"
"0xe0b",0,19,"r","AMC11_HTR_IF","AMC11_HTR_IF_EV_INFO","HTR_if EventInfo"
"0xe0c",0,31,"r","HTR_IF_STATUS_01","HTR_IF_EV_INFO_DAV","HTR_if EventInfo_dav"
"0xe0d",16,27,"r","HTR_TTC_STATUS","HTR_TTC_LOCKED","'1' if corresponding HTR_TTC locked"
"0xe0d",0,11,"r","HTR_TTC_STATUS","HTR_BC0_LOCKED","'1' if corresponding HTR_BC0 locked"
"0xe0e",16,31,"r","HTR_IF_STATUS_02","HTR_FAKE_WORD_COUNT","HTR fake word count"
"0xe0e",0,15,"r","HTR_IF_STATUS_02","HTR_FAKE_EVENT_COUNT","HTR fake event count"
"0xe0f",16,23,"r","HTR_IF_STATUS_03","HTR_EVENT_COUNT","HTR Event Count"
"0xe0f",0,15,"r","HTR_IF_STATUS_03","HTR_FAKE_HEADER_COUNT","HTR fake header count"
"0xe10",16,24,"r","HTR_IF_STATUS_04","HTR_EVN_RA","HTR EvN Read Address"
"0xe10",0,8,"r","HTR_IF_STATUS_04","HTR_EVN_WA","HTR EvN Write Address"
"0xe11",0,23,"r","HTR_IF_STATUS_05","HTR_EVN","HTR EvN"
"0xe12",16,24,"r","HTR_IF_STATUS_06","HTR_CDF_RA","HTR CDF Read Address"
"0xe12",0,8,"r","HTR_IF_STATUS_06","HTR_CDF_WA","HTR CDF Write Address"
"0xe13",30,30,"r","HTR_IF_STATUS_07","HTR_EVN_EMPTY","HTR EvN Empty"
"0xe13",29,29,"r","HTR_IF_STATUS_07","HTR_EVENT_AVL","HTR event available"
"0xe13",28,28,"r","HTR_IF_STATUS_07","HTR_TRAILER_SENT","HTR Trailers Sent"
"0xe13",27,27,"r","HTR_IF_STATUS_07","HTR_EC_CDF_RA","HTR EC_CDF Read Address"
"0xe13",26,26,"r","HTR_IF_STATUS_07","HTR_SEL_HTR_DATA","HTR Select Data"
"0xe13",25,25,"r","HTR_IF_STATUS_07","HTR_SEL_HEADER","HTR Select Header"
"0xe13",23,24,"r","HTR_IF_STATUS_07","HTR_SEL_EVN","HTR Select EvN"
"0xe13",22,22,"r","HTR_IF_STATUS_07","HTR_SEL_CDF","HTR Select CDF"
"0xe13",19,21,"r","HTR_IF_STATUS_07","HTR_SEL_TRAILER","HTR Select Trailer"
"0xe13",17,18,"r","HTR_IF_STATUS_07","HTR_HEAD_AND_TAIL","HTR Head and Tail"
"0xe13",16,16,"r","HTR_IF_STATUS_07","HTR_SEND_EVENT","HTR SendEvent"
"0xe13",12,15,"r","HTR_IF_STATUS_07","HTR_FIRST_AMC","HTR First AMC"
"0xe13",8,11,"r","HTR_IF_STATUS_07","HTR_NEXT_A","HTR Next Address"
"0xe13",4,7,"r","HTR_IF_STATUS_07","HTR_NEXT","HTR Next"
"0xe13",0,3,"r","HTR_IF_STATUS_07","HTR_SELECT","HTR Select          "
"0x1",13,13,"rw","","TTC_DWNSTRM_FLSH","if '1', send all data to downstream when ttc reset is received"
"0x1",1,1,"rw","","SLINK","'1' enables SLINK"
"0x2",16,23,"r","","READ_BACK","Read back what was written to"
"0x4",16,31,"r","CONTROL4","SLINK_ID","SLINK ID"
"0x4",15,15,"rw","CONTROL4","DIS_TTS_TRANS","'1' disables TTS transmitter     "
"0x4",14,14,"rw","CONTROL4","DIS_SLINK_TRANS","'1' disables SLINK transmitter	  "
"0x4",13,13,"rw","CONTROL4","DIS_SLINK_SPR_TRANS","'1' disables SLINK spare transmitter"
"0x4",12,12,"rw","CONTROL4","DIS_SFP_ETHER_TRANS","'1' disables SFP Ethernet transmitter"
"0x4",11,11,"r","CONTROL4","TTS_TXFALUT","'1' TTS TxFault"
"0x4",10,10,"r","CONTROL4","SLINK_TXFAULT","'1' SLINK TxFault"
"0x4",9,9,"r","CONTROL4","SLINK_SPR_TXFAULT","'1' SLINK spare TxFault"
"0x4",8,8,"r","CONTROL4","SFP_ETHER_TXFAULT","'1' SFP Ethernet TxFault"
"0x4",11,11,"r","CONTROL4","TTC_LOS_LOL","'1' indicates TTC_LOS or TTC_LOL"
"0x4",10,10,"r","CONTROL4","SLINK_REC_LOST","'1' SLINK Receiver Signal Lost "
"0x4",9,9,"r","CONTROL4","SLINK_SPR_REC_LOST","'1' SLINK spare receiver signal lost"
"0x4",8,8,"r","CONTROL4","SFP_ETHER_REC_LOST","'1' SFP Ethernet Receiver signal lost"
"0x4",7,7,"r","CONTROL4","TTC_TTS_SFP_ABS","'1' TTC/TTS SFP absent"
"0x4",6,6,"r","CONTROL4","SLINK_SFP_ABS","'1' SLINK SFP absent"
"0x4",5,5,"r","CONTROL4","SLINK_SPR_SFP_ABS","'1' SLINK spare SFP absent"
"0x4",4,4,"r","CONTROL4","SFP_ETHER_ABS","'1' Ethernet SFP absent"
"0x7",0,23,"r","CONTROL7","SOURCE_ID_RD","Source ID (read)"
"0x7",20,23,"w","CONTROL7","EVT_TY","evt_ty"
"0x7",12,19,"w","CONTROL7","EVT_STAT","evt_stat"
"0x7",0,11,"w","CONTROL7","SOURCE_ID_WR","source id (write)"
"0xa",0,31,"r","","MEM_STAT_LO_WRD","Memory Status Register Low Word"
"0xb",0,31,"r","","MEM_STAT_HI_WRD","Memory Status Register High Word"
"0xc",0,12,"rw","CONTROLC","SDRAM_PG_NUM","SDRAM page number, each pg 64KB"
"0xc",0,0,"rw","CONTROLC","PG_INC","'1' increments pg num by 128, '0' by 1 (only if run bit is '1')"
"0x19",0,31,"rw","","TTS_TEST_PATTERN","TTS test pattern"
"0x1e",0,31,"r","","T1_FPGA_DNA_LO","Bits 0-31 of FPGA DNA"
"0x1f",0,31,"r","","T1_FPGA_DNA_HI","Bits 32-56 of FPGA DNA     "
